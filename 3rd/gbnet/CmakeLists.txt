cmake_minimum_required(VERSION 3.16)
project(gb_net CXX)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake")
include(def)
include(base)

add_definitions(-DPROTOBUF_USE_DLLS)  # protobuf使用动态库
add_compile_definitions(BOOST_ASIO_HAS_STD_THREAD) # asio使用std::thread

if(NOT COMMON_CPP_DIR)
    set(COMMON_CPP_DIR ${CMAKE_CURRENT_LIST_DIR})
endif()
set(ALL_FILE ${COMMON_CPP_DIR})

collectHeadFiles(ALL_INC ALL_FILE)
collectSrcFiles(ALL_SRC ALL_FILE)
collectAllSrcFiles(ALL_INC_SRC ALL_FILE)
message("SOURCE FILES")
message(${ALL_INC_SRC})
if(LINUX)
else()
    #windown下分组
    source_group(${PROJECT_NAME} TREE ${COMMON_CPP_DIR} FILES ${ALL_INC_SRC})
endif()

add_library(${PROJECT_NAME} SHARED ${ALL_INC_SRC})
set_target_properties(${PROJECT_NAME} PROPERTIES
    OUTPUT_NAME ${PROJECT_NAME}
    WINDOWS_EXPORT_ALL_SYMBOLS ON  # 确保 MSVC 生成 .lib
)
set(BOOST_ROOT ${CMAKE_SOURCE_DIR}/../boost)  # 设置 Boost 安装目录
set(BOOST_INCLUDEDIR ${CMAKE_SOURCE_DIR}/../boost/include)  # 设置 Boost 头文件目录

# 查找 Boost 头文件
find_package(Boost 1.87 REQUIRED)

# 如果 Boost 被找到，配置项目
if(Boost_FOUND)
	message("Boost find success")
	message(${Boost_INCLUDE_DIRS})
    include_directories(${Boost_INCLUDE_DIRS})
endif()

target_include_directories(${PROJECT_NAME} PRIVATE
${CMAKE_SOURCE_DIR}/3rd
${CMAKE_SOURCE_DIR}/3rd/zlib
${CMAKE_SOURCE_DIR}/3rd/asio
${CMAKE_SOURCE_DIR}/3rd/protobuf
${CMAKE_SOURCE_DIR}/3rd/openssl/include
${MY_INC}
)



target_link_directories(${PROJECT_NAME} PRIVATE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
if(LINUX)
	set(LIB_NAMES "zlib"  "libssl" "libcrypto" "libprotobuf")
    appendSuffixInList(LIB_NAME_USE "${LIB_NAMES}" ".so")
else()
	set(LIB_NAMES "zlib" "ssl" "crypto" "libprotobuf")
    appendSuffixInList(LIB_NAME_USE "${LIB_NAMES}" ".lib")
endif()

message (${LIB_NAME_USE})
target_link_libraries(${PROJECT_NAME} PRIVATE 
${LIB_NAME_USE}

)

