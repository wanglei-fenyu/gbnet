// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_meta_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_meta_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_meta_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_meta_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_meta_2eproto;
class Meta;
struct MetaDefaultTypeInternal;
extern MetaDefaultTypeInternal _Meta_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Meta* Arena::CreateMaybeMessage<::Meta>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MsgCompressType : int {
  CompressNone = 0,
  CompressGzip = 1,
  CompressZlib = 2,
  CompressLZ4 = 3,
  MsgCompressType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgCompressType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgCompressType_IsValid(int value);
constexpr MsgCompressType MsgCompressType_MIN = CompressNone;
constexpr MsgCompressType MsgCompressType_MAX = CompressLZ4;
constexpr int MsgCompressType_ARRAYSIZE = MsgCompressType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgCompressType_descriptor();
template<typename T>
inline const std::string& MsgCompressType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgCompressType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgCompressType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgCompressType_descriptor(), enum_t_value);
}
inline bool MsgCompressType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgCompressType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgCompressType>(
    MsgCompressType_descriptor(), name, value);
}
enum MsgMode : int {
  Msg = 0,
  Request = 1,
  Response = 2,
  MsgMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MsgMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MsgMode_IsValid(int value);
constexpr MsgMode MsgMode_MIN = Msg;
constexpr MsgMode MsgMode_MAX = Response;
constexpr int MsgMode_ARRAYSIZE = MsgMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgMode_descriptor();
template<typename T>
inline const std::string& MsgMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgMode_descriptor(), enum_t_value);
}
inline bool MsgMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgMode>(
    MsgMode_descriptor(), name, value);
}
// ===================================================================

class Meta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Meta) */ {
 public:
  inline Meta() : Meta(nullptr) {}
  ~Meta() override;
  explicit constexpr Meta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Meta(const Meta& from);
  Meta(Meta&& from) noexcept
    : Meta() {
    *this = ::std::move(from);
  }

  inline Meta& operator=(const Meta& from) {
    CopyFrom(from);
    return *this;
  }
  inline Meta& operator=(Meta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Meta& default_instance() {
    return *internal_default_instance();
  }
  static inline const Meta* internal_default_instance() {
    return reinterpret_cast<const Meta*>(
               &_Meta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Meta& a, Meta& b) {
    a.Swap(&b);
  }
  inline void Swap(Meta* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Meta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Meta* New() const final {
    return new Meta();
  }

  Meta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Meta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Meta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Meta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Meta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Meta";
  }
  protected:
  explicit Meta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kIdFieldNumber = 2,
    kMethodFieldNumber = 4,
    kTypeFieldNumber = 3,
    kCompressTypeFieldNumber = 6,
    kSequenceFieldNumber = 5,
  };
  // .MsgMode mode = 1;
  void clear_mode();
  ::MsgMode mode() const;
  void set_mode(::MsgMode value);
  private:
  ::MsgMode _internal_mode() const;
  void _internal_set_mode(::MsgMode value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 method = 4;
  void clear_method();
  ::PROTOBUF_NAMESPACE_ID::int64 method() const;
  void set_method(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_method() const;
  void _internal_set_method(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .MsgCompressType compress_type = 6;
  void clear_compress_type();
  ::MsgCompressType compress_type() const;
  void set_compress_type(::MsgCompressType value);
  private:
  ::MsgCompressType _internal_compress_type() const;
  void _internal_set_compress_type(::MsgCompressType value);
  public:

  // int64 sequence = 5;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int64 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Meta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 method_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  int compress_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_meta_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Meta

// .MsgMode mode = 1;
inline void Meta::clear_mode() {
  mode_ = 0;
}
inline ::MsgMode Meta::_internal_mode() const {
  return static_cast< ::MsgMode >(mode_);
}
inline ::MsgMode Meta::mode() const {
  // @@protoc_insertion_point(field_get:Meta.mode)
  return _internal_mode();
}
inline void Meta::_internal_set_mode(::MsgMode value) {
  
  mode_ = value;
}
inline void Meta::set_mode(::MsgMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:Meta.mode)
}

// int32 id = 2;
inline void Meta::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Meta::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Meta::id() const {
  // @@protoc_insertion_point(field_get:Meta.id)
  return _internal_id();
}
inline void Meta::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Meta::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Meta.id)
}

// int32 type = 3;
inline void Meta::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Meta::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Meta::type() const {
  // @@protoc_insertion_point(field_get:Meta.type)
  return _internal_type();
}
inline void Meta::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Meta::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Meta.type)
}

// int64 method = 4;
inline void Meta::clear_method() {
  method_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meta::_internal_method() const {
  return method_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meta::method() const {
  // @@protoc_insertion_point(field_get:Meta.method)
  return _internal_method();
}
inline void Meta::_internal_set_method(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  method_ = value;
}
inline void Meta::set_method(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:Meta.method)
}

// int64 sequence = 5;
inline void Meta::clear_sequence() {
  sequence_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meta::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Meta::sequence() const {
  // @@protoc_insertion_point(field_get:Meta.sequence)
  return _internal_sequence();
}
inline void Meta::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sequence_ = value;
}
inline void Meta::set_sequence(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:Meta.sequence)
}

// .MsgCompressType compress_type = 6;
inline void Meta::clear_compress_type() {
  compress_type_ = 0;
}
inline ::MsgCompressType Meta::_internal_compress_type() const {
  return static_cast< ::MsgCompressType >(compress_type_);
}
inline ::MsgCompressType Meta::compress_type() const {
  // @@protoc_insertion_point(field_get:Meta.compress_type)
  return _internal_compress_type();
}
inline void Meta::_internal_set_compress_type(::MsgCompressType value) {
  
  compress_type_ = value;
}
inline void Meta::set_compress_type(::MsgCompressType value) {
  _internal_set_compress_type(value);
  // @@protoc_insertion_point(field_set:Meta.compress_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MsgCompressType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgCompressType>() {
  return ::MsgCompressType_descriptor();
}
template <> struct is_proto_enum< ::MsgMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgMode>() {
  return ::MsgMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_meta_2eproto
